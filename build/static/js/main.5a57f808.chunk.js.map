{"version":3,"sources":["services/people.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","services_people","axios","get","then","response","data","newObject","post","id","put","concat","delete","Person","props","react_default","a","createElement","name","number","onClick","removePerson","Filter","value","newShowCriteria","onChange","showListener","PersonForm","onSubmit","addPerson","newName","nameListener","newNumber","numberListener","type","Persons","_ref","personsToShow","map","person","App_Person","key","ErrorNotification","_ref2","message","className","Notification","_ref3","App","_useState","useState","_useState2","Object","slicedToArray","people","setPeople","_useState3","_useState4","setNewName","_useState5","_useState6","setNewNumber","_useState7","_useState8","setNewShowCriteria","_useState9","_useState10","showAll","setShowAll","_useState11","_useState12","notificationMessage","setNotificationMessage","_useState13","_useState14","errorNotificationMessage","setErrorNotificationMessage","useEffect","personService","initialPersons","filter","toLowerCase","includes","App_Notification","App_ErrorNotification","App_Filter","event","console","log","target","App_PersonForm","preventDefault","personObject","window","confirm","returnedPerson","setTimeout","catch","error","updatePerson","JSON","stringify","App_Persons","find","n","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5a57f808.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/people'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response=> response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response=>response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response=> response.data)\n}\nconst remove = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then('Successfully deleted')\n}\n\nexport default { getAll, create, update, remove}","import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport personService from './services/people'\n\nconst Person = (props) => {\n  if (props.id === null) return <div></div>\n  return(\n  <div>\n    <li>{props.name} {props.number} <button onClick={(() => \n      props.removePerson(props.id))}>poista</button></li>\n  </div>\n  )\n}\nconst Filter = (props) => {\n  return (\n    <form>\n        <div>rajaa näytettäviä<input value={props.newShowCriteria} \n        onChange={props.showListener}/></div>\n      </form>\n  )\n}\nconst PersonForm = (props) => {\n  return(\n    <div>\n      <h3>lisää uusi</h3>\n      <form onSubmit = {props.addPerson}>\n        <div>\n          nimi: <input value ={props.newName} onChange={props.nameListener}/>\n        </div>\n        <div>\n          numero: <input value={props.newNumber} onChange={props.numberListener}/>\n        </div>\n        <div>\n          <button type=\"submit\">lisää</button>\n        </div>\n        \n      </form>\n    </div>\n  )\n}\n\nconst Persons = ({personsToShow, removePerson}) => {\n  return(\n    <div>\n      <h2>Numerot</h2>\n      <ul>\n        {personsToShow.map(person => <Person key={person.id} name={person.name} number={person.number} removePerson={removePerson} id={person.id}/>)}\n      </ul>\n    </div>\n  )\n}\nconst ErrorNotification = ({message})=> {\n  if (message===null){\n    return null\n  }\n  return (\n    <div className =\"error-notification\">\n      {message}\n    </div>\n  )\n}\nconst Notification = ({message}) => {\n  if (message === null){\n    return null\n  }\n\n  return (\n    <div className=\"notification\">\n      {message}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [people, setPeople] = useState([]) \n  const [newName, setNewName ] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [newShowCriteria, setNewShowCriteria] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [notificationMessage, setNotificationMessage] = useState(null)\n  const [errorNotificationMessage, setErrorNotificationMessage] = (useState(null))\n  useEffect(()=> {\n    personService.getAll()\n    .then(initialPersons => {\n      setPeople(initialPersons)\n    })\n  }, [])\n  const updatePerson = (id, personObject) => {\n    \n    personService.update(id, personObject)\n    .then(returnedPerson => {\n      setPeople(people.map(person => person.id !== id \n        ? person : returnedPerson))\n      setNewName('')\n      setNewNumber('')\n      setNotificationMessage(`Päivitettiin henkilön ${personObject.name} tiedot.`)\n      setTimeout(()=> {\n        setNotificationMessage(null)\n      }, 5000)\n    })\n    .catch(error => {\n      setPeople(people.filter(person => person.id !== id))\n      setErrorNotificationMessage(`Henkilö ${personObject.name} oli poistettu`)\n      setNotificationMessage(null)\n      setTimeout(()=> {\n        setErrorNotificationMessage(null)\n      }, 5000)\n    })\n     \n  }\n  const personsToShow = showAll \n  ? people \n  : people.filter(person => person.name.toLowerCase().includes(newShowCriteria.toLowerCase()))\n  const addPerson = (event) => {\n    event.preventDefault()\n\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n    if (people.map(person=> person.name).includes(newName)){\n      var person = people.filter(person=>person.name===newName)[0]\n      if (window.confirm(`${newName} on jo luettelossa, korvataanko vanha numero uudella?`)){\n       \n        console.log(person, person.id, personObject)\n        updatePerson(person.id, personObject)\n       } \n      \n    } else {\n      personService\n      .create(personObject)\n      .then(returnedPerson=> {\n        setPeople(people.concat(returnedPerson))\n        setNewName('')\n        setNewNumber('')\n        setNotificationMessage(`Lisättiin ${personObject.name}`)\n        setErrorNotificationMessage(null)\n      }).catch(error => {\n        setErrorNotificationMessage(JSON.stringify(error.response.data))\n        setNotificationMessage(null)\n      })\n    }\n  }\n  const removePerson = id => {\n    console.log(id)\n    const person = people.find(n => n.id === id)\n    console.log(person)\n    if (window.confirm(`Poistetaanko ${person.name}?`)){\n      personService.remove(id)\n      .then(setPeople(people.filter(person => person.id !== id)))\n      setNotificationMessage(`Henkilö ${person.name} poistettu`)\n      }\n  }\n  const nameListener = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n  const numberListener = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n  const showListener = (event) => {\n    console.log(event.target.value)\n    setNewShowCriteria(event.target.value)\n    if (event.target.value === ('')) setShowAll(true)\n    else setShowAll(false)\n  }\n  return (\n    <div>\n      <h2>Puhelinluettelo</h2>\n      <Notification message={notificationMessage} />\n      <ErrorNotification message={errorNotificationMessage} />\n      <Filter newShowCriteria={newShowCriteria} \n        showListener={showListener}/>\n        \n      <PersonForm addPerson={addPerson} \n        newName={newName} nameListener={nameListener} \n        newNumber={newNumber} numberListener={numberListener}\n      />\n     <Persons personsToShow={personsToShow} removePerson={removePerson}/>\n      \n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}